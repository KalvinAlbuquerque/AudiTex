services:
  mongodb:
    image: mongo:latest
    container_name: auditex_mongodb
    ports:
      - "27017:27017"
    volumes:
      # Monta o script para criar o usuário da aplicação no MongoDB
      - ./backend/init-mongo-app-user.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    environment:
      MONGO_INITDB_DATABASE: mydatabase
      # HARDCODED PARA FORÇAR AUTENTICAÇÃO NO MONGODB - APENAS PARA DEBUG
      MONGO_INITDB_ROOT_USERNAME: admin_root_mongo # Escolha um nome de usuário root
      MONGO_INITDB_ROOT_PASSWORD: admin_root_password_123 # Escolha uma senha root forte
      # Estas variáveis serão lidas pelo init-mongo-app-user.js para criar o usuário 'admin'/'admin'
      MONGO_APP_USER: admin
      MONGO_APP_PASSWORD: admin
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.backend
    container_name: auditex_backend
    ports:
      - "5000:5000"
    environment:
      TENABLE_SECRET_KEY: ${TENABLE_SECRET_KEY} # Se ainda usa variáveis de ambiente para Tenable
      TENABLE_ACCESS_KEY: ${TENABLE_ACCESS_KEY} # Se ainda usa variáveis de ambiente para Tenable
      FLASK_DEBUG: 1
      FLASK_RUN_RELOAD: 'false' # Mantém desativado para evitar inconsistências no DB
      # As credenciais do MongoDB e do usuário da aplicação são hardcoded nos scripts/código
    depends_on:
      - mongodb
    volumes:
      - ./backend/src:/app/src
      - ./shared_data:/app/shared_data
      - ./backend/config.json:/app/config.json
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.frontend
    container_name: auditex_frontend
    ports:
      - "3000:3000"
    environment:
      REACT_APP_API_URL: http://backend:5000
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    restart: unless-stopped

volumes:
  mongodb_data:
    driver: local