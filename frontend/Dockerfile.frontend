# Usa uma imagem base Node.js oficial
FROM node:20-alpine AS build

# Define o diretório de trabalho dentro do contêiner
WORKDIR /app

# Copia os arquivos package.json e package-lock.json
# Isso permite que o Docker use o cache para a etapa de instalação de dependências
COPY package*.json ./

# Instala as dependências do Node.js
# 'npm ci' é mais determinístico do que 'npm install' em ambientes de CI/CD
RUN npm ci

# Copia o restante do código da aplicação
COPY . .

# Constrói a aplicação React para produção
RUN npm run build

# Imagem de produção leve para servir os arquivos estáticos
FROM nginx:alpine

# Copia os arquivos de build do estágio 'build' para o diretório de serviço do Nginx
COPY --from=build /app/dist /usr/share/nginx/html

# Copia o arquivo de configuração do Nginx (opcional, se você tiver um customizado)
# Se você tiver um nginx.conf personalizado, coloque-o na pasta frontend/nginx.conf
# COPY nginx.conf /etc/nginx/conf.d/default.conf

# Expõe a porta padrão do Nginx
EXPOSE 80

# Comando padrão do Nginx
CMD ["nginx", "-g", "daemon off;"]